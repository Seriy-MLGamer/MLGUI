/**
 * "MLGUI" library v0.0.1.
 * (C) Серый MLGamer, 2022.
 * MIT license.
 */

MLG_THEME_LIGHT=0
MLG_THEME_DARK= 1

MLG_MOBILE=0
MLG_COLOR_THEME=MLG_THEME_DARK
MLG_GUI_SCALE=1

fn MLG_get_child_global_x($bindable_node, $bindable)
{
	$result=$bindable.x+MLG_Bindable_get_global_x($bindable_node)/MLG_GUI_SCALE+$bindable_node.width/2
	if $bindable.align&LEFT
	{
		$result-$bindable_node.width/2
	}
	if $bindable.align&RIGHT
	{
		$result+$bindable_node.width/2
	}
	ret($result*MLG_GUI_SCALE)
}
fn MLG_get_child_global_y($bindable_node, $bindable)
{
	$result=$bindable.y+MLG_Bindable_get_global_y($bindable_node)/MLG_GUI_SCALE+$bindable_node.height/2
	if $bindable.align&TOP
	{
		$result-$bindable_node.height/2
	}
	if $bindable.align&BOTTOM
	{
		$result+$bindable_node.height/2
	}
	ret($result*MLG_GUI_SCALE)
}
fn MLG_handle_window_events($window, $x, $y, $width, $height, $safe_area, $enter)
{
	$min_width=400+MLG_WINDOW_SAFE_AREA*3
	$min_height=100+MLG_WINDOW_SAFE_AREA*2
	if $window.flags&MLG_WINDOW_DRAGGABLE
	{
		if $enter&&EVT[EVT_TYPE]==EVT_MOUSEBUTTONDOWN
		{
			$window.drag=1
			$window.drag_x=EVT[EVT_X]
			$window.drag_y=EVT[EVT_Y]
		}
		else{if EVT[EVT_TYPE]==EVT_MOUSEBUTTONUP
		{
			$window.drag=0
		}}
		if EVT[EVT_TYPE]==EVT_MOUSEMOVE&&$window.drag
		{
			if $window.drag_x>=$x&&$window.drag_x<$x+$width&&$window.drag_y>=$y&&$window.drag_y<$y+60*MLG_GUI_SCALE
			{
				$resize_x=EVT[EVT_X]-$window.drag_x
				$resize_y=EVT[EVT_Y]-$window.drag_y
				$window.x+$resize_x/MLG_GUI_SCALE
				$window.y+$resize_y/MLG_GUI_SCALE
				$resize_x+$x+WINDOW_XSIZE div 2-1
				$resize_y+$y+WINDOW_YSIZE div 2-1
				$window.drag_x=EVT[EVT_X]
				$window.drag_y=EVT[EVT_Y]
				if $resize_x<0
				{
					$window.x-$resize_x/MLG_GUI_SCALE
					$window.drag_x-$resize_x
				}
				if $resize_y<0
				{
					$window.y-$resize_y/MLG_GUI_SCALE
					$window.drag_y-$resize_y
				}
				$resize_x+$width-WINDOW_XSIZE+2
				$resize_y+$height-WINDOW_YSIZE+2
				if $resize_x>0
				{
					$window.x-$resize_x/MLG_GUI_SCALE
					$window.drag_x-$resize_x
				}
				if $resize_y>0
				{
					$window.y-$resize_y/MLG_GUI_SCALE
					$window.drag_y-$resize_y
				}
			}
			else{if $window.flags&MLG_WINDOW_RESIZABLE
			{
				if $window.drag_x>=$x-$safe_area&&$window.drag_x<$x
				{
					$resize=1
					$resize_x=(EVT[EVT_X]-$window.drag_x)/MLG_GUI_SCALE
					$window.x+$resize_x
					$window.width-$resize_x
					$window.drag_x=EVT[EVT_X]
					$resize_x+($x+WINDOW_XSIZE div 2-1)/MLG_GUI_SCALE
					if $resize_x<0
					{
						$window.x-$resize_x
						$window.width+$resize_x
						$window.drag_x-$resize_x*MLG_GUI_SCALE
					}
					else{if $window.width<$min_width
					{
						$window.x+$window.width-$min_width
						$window.drag_x+($window.width-$min_width)*MLG_GUI_SCALE
						$window.width=$min_width
					}}
				}
				if $window.drag_y>=$y-$safe_area&&$window.drag_y<$y
				{
					$resize=1
					$resize_y=(EVT[EVT_Y]-$window.drag_y)/MLG_GUI_SCALE
					$window.y+$resize_y
					$window.height-$resize_y
					$window.drag_y=EVT[EVT_Y]
					$resize_y+($y+WINDOW_YSIZE div 2-1)/MLG_GUI_SCALE
					if $resize_y<0
					{
						$window.y-$resize_y
						$window.height+$resize_y
						$window.drag_y-$resize_y*MLG_GUI_SCALE
					}
					else{if $window.height<$min_height
					{
						$window.y+$window.height-$min_height
						$window.drag_y+($window.height-$min_height)*MLG_GUI_SCALE
						$window.height=$min_height
					}}
				}
				if $window.drag_x>=$x+$width&&$window.drag_x<$x+$width+$safe_area
				{
					$resize=1
					$window.width+(EVT[EVT_X]-$window.drag_x)/MLG_GUI_SCALE
					$window.drag_x=EVT[EVT_X]
					$resize_x=WINDOW_XSIZE div 2-1-$window.width*MLG_GUI_SCALE-$x
					if $resize_x<0
					{
						$window.drag_x+$resize_x
						$window.width+$resize_x/MLG_GUI_SCALE
					}
					else{if $window.width<$min_width
					{
						$window.drag_x+($min_width-$window.width)*MLG_GUI_SCALE
						$window.width=$min_width
					}}
				}
				if $window.drag_y>=$y+$height&&$window.drag_y<$y+$height+$safe_area
				{
					$resize=1
					$window.height+(EVT[EVT_Y]-$window.drag_y)/MLG_GUI_SCALE
					$window.drag_y=EVT[EVT_Y]
					$resize_y=WINDOW_YSIZE div 2-2-($window.height+60)*MLG_GUI_SCALE-$y
					if $resize_y<0
					{
						$window.drag_y+$resize_y
						$window.height+$resize_y/MLG_GUI_SCALE
					}
					else{if $window.height<$min_height
					{
						$window.drag_y+($min_height-$window.height)*MLG_GUI_SCALE
						$window.height=$min_height
					}}
				}
			}}
		}
	}
	if $window.is_button_active($window)
	{
		$a=get_size($window.buttons) while $a!=0
		{
			$a-1
			MLG_Button_handle_events($window.buttons[$a])
		}
	}
}

MLG_MLGUI_FLAG_OPENGL=  0b00000000000000000000000000000001
MLG_MLGUI_FLAG_NOT_KILL=0b00000000000000000000000000000010
MLG_MLGUI_KILL_TIME=2000

MLG_MLGUI_initialized=0

fn MLG_MLGUI_init($flags)
{
	if MLG_MLGUI_initialized
	{
		MLG_MLGUI_deinit()
	}
	MLG_Node=new()
	MLG_Node.get_child_global_x=MLG_Node_get_child_global_x
	MLG_Node.get_child_global_y=MLG_Node_get_child_global_y
	MLG_Node_bindable=clone(MLG_Node)
	MLG_Node_bindable.get_child_global_x=MLG_Node_bindable_get_child_global_x
	MLG_Node_bindable.get_child_global_y=MLG_Node_bindable_get_child_global_y
	MLG_Node_movable=clone(MLG_Node_bindable)
	MLG_Node_movable.get_child_global_x=MLG_Node_movable_get_child_global_x
	MLG_Node_movable.get_child_global_y=MLG_Node_movable_get_child_global_y
	start_timer()
	MLG_MLGUI_default_GUI=MLG_GUI_new()
	MLG_MLGUI_GUI=MLG_MLGUI_default_GUI
	MLG_MLGUI_screen_callback=MLG_MLGUI_default_screen_callback
	MLG_MLGUI_user_event_handler=MLG_MLGUI_default_user_event_handler
	MLG_MLGUI_exit_request=0
	MLG_MLGUI_exit_response=0
	MLG_MLGUI_mutex=mutex_create()
	MLG_MLGUI_flags=$flags
	if $0>0&&$flags&MLG_MLGUI_FLAG_OPENGL
	{
		MLG_MLGUI_main_thread=thread_create(MLG_MLGUI_main_GL, 0)
		set_gl_callback(MLG_MLGUI_GL_callback, 0)
	}
	else
	{
		MLG_MLGUI_main_thread=thread_create(MLG_MLGUI_main, 0)
	}
	MLG_MLGUI_initialized=1
}
fn MLG_MLGUI_deinit($flags)
{
	$start=get_timer()
	MLG_MLGUI_exit_request=1
	while $0==0||$flags&MLG_MLGUI_FLAG_NOT_KILL||get_timer()-$start<MLG_MLGUI_KILL_TIME&&!MLG_MLGUI_exit_response
	{
		sleep(10)
	}
	if MLG_MLGUI_flags&MLG_MLGUI_FLAG_OPENGL
	{
		set_gl_callback()
	}
	thread_destroy(MLG_MLGUI_main_thread)
	MLG_GUI_remove(MLG_MLGUI_default_GUI)
	mutex_destroy(MLG_MLGUI_mutex)
	MLG_MLGUI_initialized=0
}
fn MLG_MLGUI_set_screen_callback($callback, $arguments)
{
	mutex_lock(MLG_MLGUI_mutex)
	if $0>0&&$callback
	{
		MLG_MLGUI_screen_callback=$callback
		MLG_MLGUI_screen_callback_arguments=$arguments
	}
	else
	{
		MLG_MLGUI_screen_callback=MLG_MLGUI_default_screen_callback
	}
	mutex_unlock(MLG_MLGUI_mutex)
}
fn MLG_MLGUI_set_user_event_handler($handler, $arguments)
{
	mutex_lock(MLG_MLGUI_mutex)
	if $0>0&&$handler
	{
		MLG_MLGUI_user_event_handler=$handler
		MLG_MLGUI_user_event_handler_arguments=$arguments
	}
	else
	{
		MLG_MLGUI_user_event_handler=MLG_MLGUI_default_user_event_handler
	}
	mutex_unlock(MLG_MLGUI_mutex)
}
fn MLG_MLGUI_set_GUI($gui)
{
	if $0>0&&$gui>=0
	{
		MLG_MLGUI_GUI=$gui
	}
	else
	{
		MLG_MLGUI_GUI=MLG_MLGUI_default_GUI
	}
}
fn MLG_MLGUI_main($thread_id, $arguments)
{
	while 1
	{
		clear()
		mutex_lock(MLG_MLGUI_mutex)
		MLG_MLGUI_screen_callback(MLG_MLGUI_screen_callback_arguments)
		if MLG_MLGUI_exit_request
		{
			mutex_unlock(MLG_MLGUI_mutex)
			MLG_MLGUI_exit_response=1
			ret
		}
		else
		{
			MLG_GUI_draw(MLG_MLGUI_GUI)
			frame()
			while get_event()
			{
				MLG_MLGUI_user_event_handler(MLG_MLGUI_user_event_handler_arguments)
				MLG_GUI_handle_event(MLG_MLGUI_GUI)
			}
		}
		mutex_unlock(MLG_MLGUI_mutex)
	}
}
fn MLG_MLGUI_main_GL($thread_id, $arguments)
{
	while 1
	{
		frame()
		if MLG_MLGUI_exit_request
		{
			MLG_MLGUI_exit_response=1
			ret
		}
		else
		{
			mutex_lock(MLG_MLGUI_mutex)
			while get_event()
			{
				MLG_GUI_user_event_handler(MLG_GUI_user_event_handler_arguments)
				MLG_GUI_handle_event(MLG_MLGUI_GUI)
			}
			mutex_unlock(MLG_MLGUI_mutex)
		}
	}
}
fn MLG_MLGUI_GL_callback($arguments)
{
	$screen=get_screen()
	set_screen(GL_SCREEN)
	clear()
	mutex_lock(MLG_MLGUI_mutex)
	MLG_MLGUI_screen_callback(MLG_MLGUI_screen_callback_arguments)
	if !MLG_MLGUI_exit_request
	{
		MLG_GUI_draw(MLG_MLGUI_GUI)
	}
	mutex_unlock(MLG_MLGUI_mutex)
	set_screen($screen)
}
fn MLG_MLGUI_default_screen_callback($arguments){}
fn MLG_MLGUI_default_user_event_handler($arguments){}

include "classes/Node.pixih"
include "classes/Bindable.pixih"
include "classes/Image.pixih"
include "classes/Text.pixih"
include "classes/Button.pixih"
include "classes/Switch.pixih"
include "classes/Select.pixih"
include "classes/Window.pixih"
include "classes/GUI.pixih"